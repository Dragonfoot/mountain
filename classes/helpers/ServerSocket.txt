using System;using System.Collections.Generic;using System.Diagnostics;using System.IO;using System.Linq;using System.Net;using System.Net.Sockets;using System.Text;using System.Threading;using System.Threading.Tasks;namespace TCPServer{    public class Program    {        static PerformanceCounter _inMessages, _inBytes, _outMessages, _outBytes, _connected;        public static void Main(String[] args)        {            if (CreatePerformanceCounters())                return;            Console.Title = "Server";            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();            CancellationToken cancel = cancellationTokenSource.Token;            TcpListener listener = new TcpListener(IPAddress.Any, 5000);            listener.Start();            Console.WriteLine("Service listening at " + listener.LocalEndpoint.ToString());            var task = AcceptClientsAsync(listener, cancel);            Console.ReadKey();            cancellationTokenSource.Cancel();            task.Wait();            Console.WriteLine("end");            Console.ReadKey(true);        }        public static async Task AcceptClientsAsync(TcpListener listener, CancellationToken cancel)        {            await Task.Yield();            while (!cancel.IsCancellationRequested)            {                try                {                    var timeoutTask = Task.Delay(2000);                    var acceptTask = listener.AcceptTcpClientAsync();                    await Task.WhenAny(timeoutTask, acceptTask);                    if (!acceptTask.IsCompleted)                        continue;                    var client = await acceptTask;                    HandleClientAsync(client, cancel);                }                catch (Exception aex)                {                    var ex = aex.GetBaseException();                    Console.WriteLine("Accepting error: " + ex.Message);                }            }        }        public static async Task HandleClientAsync(TcpClient client, CancellationToken cancel)        {            await Task.Yield();            _connected.Increment();            var local = client.Client.LocalEndPoint.ToString();            Console.WriteLine("Connected " + local);            StreamReader sr = null;            StreamWriter sw = null;            try            {                var stream = client.GetStream();                sr = new StreamReader(stream, Encoding.UTF8);                sw = new StreamWriter(stream, Encoding.UTF8);                while (!cancel.IsCancellationRequested && client.Connected)                {                    //sr = new StreamReader(stream, Encoding.UTF8);                    //sw = new StreamWriter(stream, Encoding.UTF8);                                                            var msg = await sr.ReadLineAsync(); ;                    if (msg == null)                        continue;                    _inMessages.Increment();                    _inBytes.IncrementBy(msg.Length);                    await sw.WriteLineAsync(msg);                    await sw.FlushAsync();                    _outMessages.Increment();                    _outBytes.IncrementBy(msg.Length);                                    }            }            catch (Exception aex)            {                var ex = aex.GetBaseException();                Console.WriteLine("Client error: " + ex.Message);            }            finally            {                _connected.Decrement();                if(sr != null)                    sr.Dispose();                                if(sw != null)                    sw.Dispose();            }            Console.WriteLine("Disconnected " + local);        }        }           }}